// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usercoreservice

import (
	"context"
	usercore "github.com/BlueGopher/tiktok-rpc/kitex_gen/userCore"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userCoreServiceServiceInfo
}

var userCoreServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserCoreService"
	handlerType := (*usercore.UserCoreService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserInfo":  kitex.NewMethodInfo(getUserInfoHandler, newUserCoreServiceGetUserInfoArgs, newUserCoreServiceGetUserInfoResult, false),
		"RegisterUser": kitex.NewMethodInfo(registerUserHandler, newUserCoreServiceRegisterUserArgs, newUserCoreServiceRegisterUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "usercore",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usercore.UserCoreServiceGetUserInfoArgs)
	realResult := result.(*usercore.UserCoreServiceGetUserInfoResult)
	success, err := handler.(usercore.UserCoreService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserCoreServiceGetUserInfoArgs() interface{} {
	return usercore.NewUserCoreServiceGetUserInfoArgs()
}

func newUserCoreServiceGetUserInfoResult() interface{} {
	return usercore.NewUserCoreServiceGetUserInfoResult()
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*usercore.UserCoreServiceRegisterUserArgs)
	realResult := result.(*usercore.UserCoreServiceRegisterUserResult)
	success, err := handler.(usercore.UserCoreService).RegisterUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserCoreServiceRegisterUserArgs() interface{} {
	return usercore.NewUserCoreServiceRegisterUserArgs()
}

func newUserCoreServiceRegisterUserResult() interface{} {
	return usercore.NewUserCoreServiceRegisterUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserInfo(ctx context.Context, req *usercore.DouyinUserRequest) (r *usercore.DouyinUserResponse, err error) {
	var _args usercore.UserCoreServiceGetUserInfoArgs
	_args.Req = req
	var _result usercore.UserCoreServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterUser(ctx context.Context, req *usercore.DouyinUserRegisterRequest) (r *usercore.DouyinUserRegisterResponse, err error) {
	var _args usercore.UserCoreServiceRegisterUserArgs
	_args.Req = req
	var _result usercore.UserCoreServiceRegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
